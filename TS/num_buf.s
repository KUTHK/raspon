	@r0はベースレジスタ
	@r12に表示する数値を保存
	.section .text
	.global  num_buf
num_buf:
	push {r0-r12,r14}	
	
	ldr     r1,=frame_buffer
	mov	r2, #10
	udiv	r3, r12, r2
	mul	r4, r3, r2	@r3に描画する値の10の桁
	sub	r5, r12, r4	@r5に描画する値の1の桁

	mov	r8, #8
	ldr	r7, =number
	@10の桁
	mov	r3, r3, lsl #2	@r7のデータがword単位なので4倍
	ldr	r9, [r7, r3]
	@1の桁
	mov	r5, r5, lsl #2
	ldr	r10, [r7, r5]
loop_row:				@10の桁のドットデータを4bit左シフトした値と1の桁のドットデータを加算してframe_bufferに書き込む
	@10の桁の値
	ldrb	r2, [r9], #1
	@1の桁の値
	ldrb	r4, [r10], #1
	add	r11, r4, r2, lsl #4
	
	strb	r11, [r1], #1
	
	subs	r8, r8, #1
	bne	loop_row
	
	
	pop {r0-r12,r15}


c0:	@各数値のドットデータ
	.byte 0x0, 0xe, 0xa, 0xa, 0xa, 0xe, 0x0, 0x0
c1:
	.byte 0x0, 0x4, 0xc, 0x4, 0x4, 0xe, 0x0, 0x0
c2:
	.byte 0x0, 0xe, 0x2, 0xe, 0x8, 0xe, 0x0, 0x0
c3:
	.byte 0x0, 0xe, 0x2, 0xe, 0x2, 0xe, 0x0, 0x0
c4:
	.byte 0x0, 0xa, 0xa, 0xe, 0x2, 0x2, 0x0, 0x0
c5:	
	.byte 0x0, 0xe, 0x8, 0xe, 0x2, 0xe, 0x0, 0x0
c6:
	.byte 0x0, 0xe, 0x8, 0xe, 0xa, 0xe, 0x0, 0x0
c7:
	.byte 0x0, 0xe, 0xa, 0x2, 0x2, 0x2, 0x0, 0x0
c8:
	.byte 0x0, 0xe, 0xa, 0xe, 0xa, 0xe, 0x0, 0x0
c9:
	.byte 0x0, 0xe, 0xa, 0xe, 0x2, 0xe, 0x0, 0x0
number:
	.word c0, c1, c2, c3, c4, c5, c6, c7, c8, c9

