林 晃太郎 作成プログラム
********** display.s **********
*HK_display
**8ms 周期で matrixLED を光らせる
**print_line を使って各行で判定をすることによって簡潔化
*all_clear
**matrixLED を全て消灯
*print_line
**指定された行の matrixLED を点灯
**点灯させる場所を OR 演算でまとめて格納
*HK_fb_clear
**frame_buffer を全て 0 にする
**word 単位で書き込むことによってループするより少しだけ高速化、簡潔化
********************

********** point.s **********
*HK_add_point1
**player1 の得点を加算
**得点加算時に勝利判定 (winner 1)
*HK_add_point2
**player2 の得点を加算
**得点加算時に勝利判定 (winner 2)
*HK_reset_poin
**player1, player2 の得点, 勝者の判定をリセットする
********************

********** start.s **********
*HK_start
**スタート画面を再生する
**サブルーチンが使いやすかったため楽だった
*HK_start_init
**スタート画面の初期設定
********************

********** text.s **********
一番頑張った
*HK_slide_text
**text を一定間隔で 1 マスずつ左にずらす (改行コード (\n) でループ)
**一定時間ごとに現在地を示しているデータを 1 加算して frame_buffer を書き換える処理を読んでいるだけ
*HK_slide_text_rotate
**HK_slide_text を 180 度回転させたバージョン
**タイマーは共有. player が 2 人いるので表示が分かりやすいように
**frame_buffer に text を書き込み x, y 軸で反転させているだけ...正直適当
*HK_write_text
**再生する文字列の更新
**frame_buffer のように特定の番地のデータを書き換えて利用する
**frame_buffer と違う点は長さは基本自由で (現在 1000 程領域を確保している (変更可)) 改行コード (\n) で文字列の最後を表す (今思えば (\0) の方が良かった)
**利用する側で文字列を毎回書き換えるのは面倒なので, 文字列データの番地を受け取りこのサブルーチンで書き換えている.
**ポインタのポインタの様な使い方をしているので頭がこんがらがる
**ここでタイマーのリセットもしている
*HK_reset_text_position
**text の先頭に戻る
*HK_read_text
**text を frame_buffer に書き込み
**現在地が格納されているデータで使う先頭の文字を選択し OR 演算と 左SHIFT を使って 3 文字分取り出し, 最後に 右SHIFT して位置の調整
*get_text_data
**文字列データをレジスタに書き込み
**データを ascii コード順に並べることによりスペースから何個先の文字かで指定
**スペース (0x22) から 大文字 Z まで対応. 時間があれば小文字も追加したかった
*clean
**frame_buffer の値をすべて 0 にする
*mod
**レジスタで指定された数値の余りを返す
**自分が昔に書いたコードの流用
********************

********** write_number.s **********
*HK_write_number
**matrixLED に数値を表示 (1 桁)
**入力の 1 の位を frame_buffer に書き込み
*HK_write_numbers
**matrixLED に数値を表示 (2 桁)
**入力の 10 の位と 1 の位を frame_buffer に書き込み
**1 の位と 10 の位だけを抽出する処理が上手く行かず苦戦した結果 mod も求めるサブルーチンを作成した
*mod
**余りの計算をするだけ
**mod 演算を main 内で使うと頭がこんがらがる
*number
**数値データの配列を返す
*clean
**frame_buffer を全て 0 にする
*write
**数値データの配列を frame_buffer に書き込み
**frame_buffer のデータを 4bit シフトから OR 演算で書き込む
********************
